<section xml:id="evaluate_expressions">
    <title>Evaluate Expressions</title>
    <introduction>
    <p>
        <ul>
            <li>
                <p>Basic operator precedence: +, -, *, /, **, //, %</p>
            </li>
            <li>
                <p>Operation precedence: the above, plus parentheses</p>
            </li>
            <li>
                <p>Augmented Assignment: +=, -=, *=, /=, **=, //=, %=</p>
            </li>
            <li>
                <p>Assigning Booleans: ==, !=, &lt;, >, &lt;=, >=</p>
                <p>
                    <ul>
                        <li>
                            <p>is, is not, in, not in ???</p>
                        </li>
                    </ul>
                </p>
            </li>
            <li>
                <p>Boolean Relational Operators: and, or, not</p>
            </li>
            <li>
                <p>Swap???</p>
            </li>
            <li>
                <p>Method Calls???</p>
            </li>
            <li>
                <p>Subscripting??</p>
            </li>
            <li>
                <p>Attribute access???</p>
            </li>
            <li>
                <p><c>if</c> expression</p>
            </li>
            <li>
                <p>Definitely not doing:</p>
                <p>
                    <ul>
                        <li>
                            <p>Shift operators (<c>&lt;&lt;</c>and>>)</p>
                        </li>
                        <li>
                            <p>Bitwise operators (^, |, &amp;)</p>
                        </li>
                        <li>
                            <p>Matrix multipliers (@)</p>
                        </li>
                        <li>
                            <p>Comprehensions</p>
                        </li>
                    </ul>
                </p>
            </li>

        </ul>
    </p>
<p>Important type interactions:</p>
<p>
    <ol label = "-">
        <li>
            <p>Int and Float -> Float</p>
        </li>
        <li>
            <p>Float and Float -> Float</p>
        </li>
        <li>
            <p>Str and Int (*)</p>
        </li>
        <li>
            <p>Int division (/ and //)</p>
        </li>
        <li>
            <p>Booleans are Integers</p>
        </li>
    </ol>
</p>
</introduction>
<subsection xml:id="subsec-eval-exp">
    <title>Basic Operation Precedence</title>
    <p>
        <ol label="1">
            <li>
                <p>Given the following code snippet, evaluate the final statement (the last line). If invalid, give the reason. If valid, what value is assigned to the variable? Note any possible side effects.</p>   
            </li>
        </ol>
    </p>
    <program language="python"><input>
alpha = 2
beta = 1
delta = 3
omega = 2.5
theta = -1.3
kappa = 3.0
        
# Example:
mu = alpha / kappa + delta
        
# First asks if valid, then asks what the value is
# Practice 1
mu = beta * theta;
# Practice 2
eta = alpha * kappa
# Practice 3
alpha = beta + delta
# Practice 4
beta = beta * alpha 
</input></program>

    <program language="python"><input>
gamma = delta / (alpha + beta) % alpha;
            
# Practice 1
mu = alpha / kappa + delta
# Practice 2
eta = alpha * beta + (omega â€“ theta) * kappa
" Why is this statement invalid? "
# Practice 3
r = 8
volume = ___
" Which statement will calculate the volume of a sphere most accurately? "
</input></program>

    <program language="python"><input>
alpha = 2
beta = 5
delta = 7
gamma = 5
omega = 2.5
theta = -1.3
kappa = 3.0
# Example
gamma += delta / alpha + beta % alpha;
# P1
delta += alpha
# P2
alpha *= beta + delta

alpha = 2
beta = 1
delta = 3
omega = 2.5
theta = -1.3
kappa = 3.0
# P1
delta += omega
    </input></program>

    <program language="python"><input>
# Logical comparison and equality (assignment)
alpha = 42
beta = 1
gamma = 5

# Example
result = beta &lt;&lt;= alpha
# P1
x = 4
y = 6
result = x &lt;&lt; y
# P2
result = x + 2 &lt;&lt; y
# P3
result = x != y
# P4
result = x + 3 >= y
# P5
result = y == x
# P6
result = y == x+2
# P7
result = 7 == 7
# P8
result = 13 &lt;&lt; 100
# P9
result = -17.32 != -17.32
# P10
result = -3.0 == 0.0
# P11
result = 13 &lt;&lt;= 100
# P12
result = -18 &lt;&lt; -15
# P13
result = 4.2 > 3.7
# P14
result = 13 &lt;&lt;= 13
# P15
result = 0.012 > 0.013

# Boolean operators
alpha = 42
beta = 1
gamma = 5
# Example
result = beta &lt;&lt;= gamma and gamma &lt;&lt;= alpha
# P1
"Fill out truth table for {a, b, c} and {a and (not b or c)}"
            </input></program>
    
            <program language="python"><input>
# Swap
x = 7
y = 13
# Example
# Nope I hate this one. In Python, you'd do:
# x, y = y, x
# Except you wouldn't, because you never actually use swaps in CS1
    </input></program>

    <program language="python"><input>
x = 42
y = 11
z = 5
x = z
y = x
z = y
# Example
" What is the final value of x?"
" What is the final value of y?"
" What is the final value of z?"
    </input></program>

    <program language="python"><input>
alpha = 2
beta = 1
delta = 3
omega = 2.597
theta = -1.3
kappa = 3.0
# Example
rho = beta + round(omega, alpha)
# P1
mu = alpha * abs(theta)
# P2
gamma = pow(25, .5)
    </input></program>
</subsection>
</section>

           


 